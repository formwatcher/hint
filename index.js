// Generated by CoffeeScript 1.3.3
(function() {
  var $,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $ = ender;

  Formwatcher.decorators.push((function(_super) {

    __extends(_Class, _super);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.name = "Hint";

    _Class.prototype.description = "Displays a hint in an input field.";

    _Class.prototype.nodeNames = ["INPUT", "TEXTAREA"];

    _Class.prototype.defaultOptions = {
      auto: true,
      removeTrailingColon: true,
      color: "#aaa"
    };

    _Class.prototype.decParseInt = function(number) {
      return parseInt(number, 10);
    };

    _Class.prototype.accepts = function(input) {
      if (_Class.__super__.accepts.call(this, input)) {
        if ((input.data("hint") != null) || (this.options.auto && Formwatcher.getLabel({
          input: input
        }, this.watcher.options.automatchLabel))) {
          return true;
        }
      }
      return false;
    };

    _Class.prototype.decorate = function(input) {
      var changeFunction, delayChangeFunction, elements, fadeLength, hint, hintElement, inputOffset, label, leftPosition, nextTimeout, topPosition, wrapper,
        _this = this;
      elements = {
        input: input
      };
      hint = input.data("hint");
      if (!(hint != null) || !hint) {
        label = Formwatcher.getLabel(elements, this.watcher.options.automatchLabel);
        if (!label) {
          throw "The hint was empty, but there was no label.";
        }
        elements.label = label;
        label.hide();
        hint = label.html();
        if (this.options.removeTrailingColon) {
          hint = hint.replace(/\s*\:\s*$/, "");
        }
      }
      Formwatcher.debug("Using hint: " + hint);
      wrapper = $.create("<span style=\"display: inline-block; position: relative;\" />");
      wrapper.insertAfter(input);
      wrapper.append(input);
      inputOffset = {
        left: input[0].offsetLeft,
        top: input[0].offsetTop,
        width: input[0].offsetWidth,
        height: input[0].offsetHeight
      };
      leftPosition = this.decParseInt(input.css("paddingLeft")) + this.decParseInt(inputOffset.left) + this.decParseInt(input.css("borderLeftWidth")) + 2 + "px";
      topPosition = this.decParseInt(input.css("paddingTop")) + this.decParseInt(inputOffset.top) + this.decParseInt(input.css("borderTopWidth")) + "px";
      hintElement = $.create("<span />").html(hint).css({
        position: "absolute",
        display: "none",
        top: topPosition,
        left: leftPosition,
        fontSize: input.css("fontSize"),
        lineHeight: input.css("lineHeight"),
        fontFamily: input.css("fontFamily"),
        color: this.options.color
      }).addClass("hint").on("click", function() {
        return input[0].focus();
      }).insertAfter(input);
      fadeLength = 100;
      input.focusin(function() {
        if (input.val() === "") {
          return hintElement.animate({
            opacity: 0.4,
            duration: fadeLength
          });
        }
      });
      input.focusout(function() {
        if (input.val() === "") {
          return hintElement.animate({
            opacity: 1,
            duration: fadeLength
          });
        }
      });
      changeFunction = function() {
        if (input.val() === "") {
          return hintElement.show();
        } else {
          return hintElement.hide();
        }
      };
      input.keyup(changeFunction);
      input.keypress(function() {
        return setTimeout((function() {
          return changeFunction();
        }), 1);
      });
      input.keydown(function() {
        return setTimeout((function() {
          return changeFunction();
        }), 1);
      });
      input.change(changeFunction);
      nextTimeout = 10;
      delayChangeFunction = function() {
        changeFunction();
        setTimeout((function() {
          return delayChangeFunction();
        }), nextTimeout);
        nextTimeout = nextTimeout * 2;
        return nextTimeout = (nextTimeout > 10000 ? 10000 : nextTimeout);
      };
      delayChangeFunction();
      return elements;
    };

    return _Class;

  })(Formwatcher.Decorator));

}).call(this);
